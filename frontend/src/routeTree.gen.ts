/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutUploadCsvRouteImport } from './routes/_layout/upload-csv'
import { Route as LayoutFindRouteRouteImport } from './routes/_layout/find-route'
import { Route as LayoutDeparturesRouteImport } from './routes/_layout/departures'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutUploadCsvRoute = LayoutUploadCsvRouteImport.update({
  id: '/upload-csv',
  path: '/upload-csv',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutFindRouteRoute = LayoutFindRouteRouteImport.update({
  id: '/find-route',
  path: '/find-route',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDeparturesRoute = LayoutDeparturesRouteImport.update({
  id: '/departures',
  path: '/departures',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/departures': typeof LayoutDeparturesRoute
  '/find-route': typeof LayoutFindRouteRoute
  '/upload-csv': typeof LayoutUploadCsvRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/departures': typeof LayoutDeparturesRoute
  '/find-route': typeof LayoutFindRouteRoute
  '/upload-csv': typeof LayoutUploadCsvRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/departures': typeof LayoutDeparturesRoute
  '/_layout/find-route': typeof LayoutFindRouteRoute
  '/_layout/upload-csv': typeof LayoutUploadCsvRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/departures' | '/find-route' | '/upload-csv'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/departures' | '/find-route' | '/upload-csv'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/login'
    | '/_layout/departures'
    | '/_layout/find-route'
    | '/_layout/upload-csv'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/upload-csv': {
      id: '/_layout/upload-csv'
      path: '/upload-csv'
      fullPath: '/upload-csv'
      preLoaderRoute: typeof LayoutUploadCsvRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/find-route': {
      id: '/_layout/find-route'
      path: '/find-route'
      fullPath: '/find-route'
      preLoaderRoute: typeof LayoutFindRouteRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/departures': {
      id: '/_layout/departures'
      path: '/departures'
      fullPath: '/departures'
      preLoaderRoute: typeof LayoutDeparturesRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDeparturesRoute: typeof LayoutDeparturesRoute
  LayoutFindRouteRoute: typeof LayoutFindRouteRoute
  LayoutUploadCsvRoute: typeof LayoutUploadCsvRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDeparturesRoute: LayoutDeparturesRoute,
  LayoutFindRouteRoute: LayoutFindRouteRoute,
  LayoutUploadCsvRoute: LayoutUploadCsvRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
